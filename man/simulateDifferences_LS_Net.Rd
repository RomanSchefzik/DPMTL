% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SensitivityAnalyses_DP.R
\name{simulateDifferences_LS_Net}
\alias{simulateDifferences_LS_Net}
\title{Sensitivity analysis for MTL with least-square loss and network incorporation}
\usage{
simulateDifferences_LS_Net(rData, C, W, X, Y, G, nSimulations)
}
\arguments{
\item{rData}{A list consisting of \eqn{T} elements, each consisting of a list comprising two elements named grad_w (a \eqn{(P \times 1)} matrix including a gradient vector corresponding to \eqn{P} predictors) and funcVal (a function value), respectively}

\item{C}{The hyper-parameter associated with L2 term in the respective MTL model}

\item{W}{A \eqn{(P \times T)} coefficient matrix}

\item{X}{A set of \eqn{T} \eqn{(N_t \times P)} feature matrices, \eqn{t \in \{1,\ldots,T\}}}

\item{Y}{A set of \eqn{T} response vectors \eqn{\in \mathbb{R}^{N_t}}, \eqn{t \in \{1,\ldots,T\}}}

\item{G}{Matrix describing the task relatedness}

\item{nSimulations}{number of runs in the sensitivity analysis involved in the differential privacy mechanism}
}
\value{
A \eqn{(P \times T)} matrix containing the maximum component-wise distances between the original gradient vector and a gradient vector obtained when removing one data point from the input data, across \code{nSimulations} runs for each of the \eqn{T} tasks
}
\description{
Sensitivity analysis for MTL with least-square loss and network incorporation: For each of \eqn{T} tasks, compute the component-wise distance between an original gradient vector and a gradient vector obtained when removing one data point from the input data, perform this procedure for in total \code{nSimulations} data point removals and calculate the maximum of each gradient vector component over all \code{nSimulations} repetitions
}
\examples{
set.seed(24)
X0<-list(matrix(rnorm(100000),nrow=200,ncol=500),matrix(rnorm(150000),nrow=300,ncol=500))
set.seed(24)
Y0<-list(rnorm(200),rnorm(300))
set.seed(24)
W0<-matrix(rnorm(1000),nrow=500,ncol=2)
nTasks<-2
rData0<-lapply(1:nTasks, function(k){
x=X0[[k]]; y=Y0[[k]];w=W0[,k]
grad_w <-  t(x) \%*\% (x \%*\% w - y) / nrow(x)
funcVal <- 0.5 * mean((y - x \%*\% w)^2)
return(list(grad_w=grad_w, funcVal=funcVal))
})
G0<-diag(nTasks)-(1/nTasks)
C0<-1
n<-100
simdiff<-simulateDifferences_LS_Net(rData=rData0, C=C0, W=W0, X=X0, Y=Y0,G=G0, nSimulations=n)

}
